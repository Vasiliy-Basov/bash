#!/bin/bash

# Запрос ввода первого числа 
# Опция -p используется для вывода приглашения (промпта) перед тем, как пользователь введет данные.
read -p "Введите первое число: " num1

# Запрос ввода второго числа
read -p "Введите второе число: " num2

# Проверка на то, что введены числа
# [[ ... ]]: Это конструкция для выполнения условных проверок в Bash.
# =~: Это оператор сопоставления, который используется для сравнения строки с регулярным выражением
# ^-?[0-9]+$: Это регулярное выражение, которое означает следующее:
# ^: Обозначает начало строки.
# [0-9]+: Означает одну или более цифр от 0 до 9.
# $: Обозначает конец строки.
# ^-?[0-9]+$ ожидает, что значение переменных num1 и num2 будет состоять только из цифр (в том числе отрицательных)
number_regex='^-?[0-9]+$'
# Если оба num1 и num2 удовлетворяют этому регулярному выражению (то есть, они являются целыми числами), 
# то условие вернет true. Если хотя бы одна из них не является целым числом, то условие вернет false.
if [[ $num1 =~ $number_regex && $num2 =~ $number_regex ]]; then
    # Выполняем сложение
    sum=$((num1 + num2))
    
    # Записываем значение sum в файл dan
    echo $sum > dan
    
    # Умножаем значение из файла dan на 100. $(...) то синтаксис командной оболочки Bash для выполнения команд внутри подстановочных скобок 
    # и получения результата выполнения. То есть, результат выполнения cat dan будет вставлен в это выражение.
    result=$(($(cat dan) * 100))
    
    # Выводим результат на экран
    echo "Результат умножения на 100: $result"
    
    # Записываем результаты всех вычислений в файл rezult.txt
    echo "Первое число: $num1" >> rezult.txt
    echo "Второе число: $num2" >> rezult.txt
    echo "Результат сложения: $sum" >> rezult.txt
    echo "Результат умножения на 100: $result" >> rezult.txt
else
    echo "Ошибка: Пожалуйста, введите целое число (включая отрицательные)."
fi
